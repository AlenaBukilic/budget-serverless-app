service: budget-serverless-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs14.x

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    BUDGET_TABLE: Budget-${self:provider.stage}
    IMAGE_TABLE: Budget-imgs-${self:provider.stage}
    BUDGET_ID_INDEX: BudgetIdIndex
    BUDGET_USER_INDEX: BudgetUserIndex
    IMAGES_S3_BUCKET: budget-serverless-april-capstone-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    CERTIFICATE_DOWNLOAD_URL: https://dev-j0zeu-3k.us.auth0.com/.well-known/jwks.json

custom:
  webpack:
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Budget App
        description: Budget application for managing income and expense

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBudgetItems:
    handler: src/lambda/http/getBudgetItems.handler
    role: CustomRoleForGetBudgetItems
    events:
      - http:
          method: get
          path: budgets
          authorizer: Auth
          cors: true

  CreateBudgetItem:
    handler: src/lambda/http/createBudgetItem.handler
    role: CustomRoleForCreateBudgetItems
    events:
      - http:
          method: post
          path: budgets
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/models/create-budget-request.json)}

  UpdateBudgetItem:
    handler: src/lambda/http/updateBudgetItem.handler
    role: CustomRoleForUpdateBudgetItems
    events:
      - http:
          method: patch
          path: budgets/{budgetItemId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/models/update-budget-request.json)}

  DeleteBudgetItem:
    handler: src/lambda/http/deleteBudgetItem.handler
    role: CustomRoleForDeleteBudgetItems
    events:
      - http:
          method: delete
          path: budgets/{budgetItemId}
          authorizer: Auth
          cors: true

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    role: CustomRoleForS3AccessBudget
    events:
      - http:
          method: post
          path: budgets/{budgetItemId}/attachment
          authorizer: Auth
          cors: true

resources:
  Resources:
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy1:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: GetPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

    BudgetsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: budgetItemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: budgetItemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BUDGET_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BUDGET_ID_INDEX}
            KeySchema:
              - AttributeName: budgetItemId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CustomRoleForS3AccessBudget:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CustomRoleForS3AccessBudget
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: s3AccessPolicyAndUpdateDynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}/index/${self:provider.environment.BUDGET_ID_INDEX}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*

    CustomRoleForGetBudgetItems:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CustomRoleForGetBudgetItems
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: getBudgetItemsDynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}/index/${self:provider.environment.BUDGET_USER_INDEX}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    CustomRoleForCreateBudgetItems:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CustomRoleForCreateBudgetItems
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: createBudgetItemsDynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    CustomRoleForDeleteBudgetItems:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CustomRoleForDeleteBudgetItems
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: deleteBudgetItemsDynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}/index/${self:provider.environment.BUDGET_ID_INDEX}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*

    CustomRoleForUpdateBudgetItems:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CustomRoleForUpdateBudgetItems
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: updateBudgetItemsDynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BUDGET_TABLE}/index/${self:provider.environment.BUDGET_ID_INDEX}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*
